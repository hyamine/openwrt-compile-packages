#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Auto-Packages

on: 
  repository_dispatch:
  # push: 
  #   branches:
  #     - master
  # schedule:
  #   - cron: 0 1 */1 * *
  workflow_dispatch:
    inputs:
      ssh:
        description: '[ssh-actions]改成[ssh],再按[Run workflow]按钮启动,则开启SSH连接配置固件'
        required: false
        default: 'ssh-actions'

env:
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  SCKEY: ${{ secrets.SCKEY }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  TZ: Asia/Shanghai

jobs:
  build:
    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id
    runs-on: Ubuntu-20.04
    
    name: Build ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: ["${{ github.event.client_payload.target }}"]
        
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: cancel running workflows
      uses: styfle/cancel-workflow-action@main
      if: contains(github.event.action, 'cw')
      with:
        workflow_id: Auto-Package.yml
        access_token: ${{ github.token }}

    - name: Load Settings.ini
      run: |
        source "${GITHUB_WORKSPACE}/devices/common/settings.ini"
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV
        echo "DIY_SH=${DIY_SH}" >> $GITHUB_ENV
        echo "FREE_UP_DISK=${FREE_UP_DISK}" >> $GITHUB_ENV
        echo "SSH_ACTIONS=${SSH_ACTIONS}" >> $GITHUB_ENV
        echo "UPLOAD_BIN_DIR_FOR_ARTIFACT=${UPLOAD_BIN_DIR_FOR_ARTIFACT}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_FOR_ARTIFACT=${UPLOAD_FIRMWARE_FOR_ARTIFACT}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_FOR_RELEASE=${UPLOAD_FIRMWARE_FOR_RELEASE}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_TO_COWTRANSFER=${UPLOAD_FIRMWARE_TO_COWTRANSFER}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_TO_WETRANSFER=${UPLOAD_FIRMWARE_TO_WETRANSFER}" >> $GITHUB_ENV
        echo "PACKAGES_REPOS=${PACKAGES_REPOS}" >> $GITHUB_ENV
        if [ ${{matrix.target}} == "xiaomi_mi-router-3-pro" ]; then
            echo "MTARGET=mipsel_24kc" >> $GITHUB_ENV
        #elif [ ${{matrix.target}} == "x86_64" ]; then
            #echo "MTARGET=x86_64" >> $GITHUB_ENV
        else
            echo "MTARGET=x86_64" >> $GITHUB_ENV
        fi

    - name: Trigger Packages Update
      run: |
        gitdate=$(curl -H "Authorization: token ${{ secrets.REPO_TOKEN }}" -s "https://api.github.com/repos/${{ env.PACKAGES_REPOS }}/actions/runs" | jq -r '.workflow_runs[0].created_at')
        gitdate=$(date -d "$gitdate" +%s)
        now=$(date -d "$(date '+%Y-%m-%d %H:%M:%S')" +%s)
        if [[ $(expr $gitdate + 60) < $now ]]; then
        curl -X POST https://api.github.com/repos/${{ env.PACKAGES_REPOS }}/dispatches \
        -H "Accept: application/vnd.github.everest-preview+json" \
        -H "Authorization: token ${{ secrets.REPO_TOKEN }}" \
        --data '{"event_type": "updated by compile-packages"}'
        fi

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        ( sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc-s1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx-ucl libelf-dev autoconf automake libtool autopoint device-tree-compiler ccache xsltproc rename antlr3 gperf wget curl swig rsync bc
        sudo -E apt-get -qq purge azure-cli ghc* zulu* hhvm llvm* firefox powershell openjdk* dotnet* google* mysql* php* android*
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean ) &
        sudo timedatectl set-timezone "$TZ"

    - name: Get current date
      id: date
      run: |
        echo "date=$(date +'%Y.%m.%d-%H%M')" >> $GITHUB_ENV
        echo "date2=$(date +'%m/%d %Y')" >> $GITHUB_ENV
        echo "date3=$(date +'%m.%d')" >> $GITHUB_ENV

    - name: Clone source code
      run: |
        REPO_BRANCH="$(curl -s https://api.github.com/repos/openwrt/openwrt/tags | jq -r '.[].name' | grep v21 | head -n 1 | sed -e 's/v//')"
        if [ ${{matrix.target}} == "xiaomi_mi-router-3-pro" ]; then
            curl -fL -m 60 -o sdk.tar.xz https://downloads.openwrt.org/releases/$REPO_BRANCH/targets/ramips/mt7621/openwrt-sdk-$REPO_BRANCH-ramips-mt7621_gcc-8.4.0_musl.Linux-x86_64.tar.xz
        #elif [[ ${{matrix.target}} == "x86_64" ]]; then
        else
            curl -fL -m 60 -o sdk.tar.xz https://downloads.openwrt.org/releases/$REPO_BRANCH/targets/x86/64/openwrt-sdk-$REPO_BRANCH-x86-64_gcc-8.4.0_musl.Linux-x86_64.tar.xz || curl -fL -m 60 -o sdk.tar.xz https://downloads.openwrt.org/releases/21.02-SNAPSHOT/targets/x86/64/openwrt-sdk-21.02-SNAPSHOT-x86-64_gcc-8.4.0_musl.Linux-x86_64.tar.xz
        fi

    - name: Free up disk space
      if: env.FREE_UP_DISK == 'true'
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo mkdir -p -m 777 openwrt /mnt/openwrt/dl /mnt/openwrt/build_dir/hostpkg openwrt/build_dir /mnt/openwrt/bin
        ln -sf /mnt/openwrt/dl openwrt/dl
        ln -sf /mnt/openwrt/build_dir/hostpkg openwrt/build_dir/hostpkg
        ln -sf /mnt/openwrt/bin openwrt/bin

    - name: Load custom configuration
      run: |
        mkdir openwrt
        tar -xJf sdk.tar.xz -C openwrt
        rm -Rf sdk.tar.xz
        cd openwrt
        cp -rf ./openwrt-sdk*/. ./ || true
        cp -rf ../devices ./
        cp -rf devices/common/. ./
        cp -rf devices/${{matrix.target}}/. ./
        chmod -R +x devices/* || true
        sed -i '/	refresh_config();/d' scripts/feeds
        ./scripts/feeds update -a
        find "devices/common/patches" -type f -name '*.b.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -p1 -E --forward --no-backup-if-mismatch"
        /bin/bash "devices/common/custom.sh"
        if [ -f "devices/${{matrix.target}}/${{ env.DIY_SH }}" ]; then
          /bin/bash "devices/${{matrix.target}}/${{ env.DIY_SH }}"
        fi
        find "devices/common/patches" -type f -name '*.patch' ! -name '*.b.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -p1 -E --forward --no-backup-if-mismatch"
        if [ -n "$(ls -A "devices/${{matrix.target}}/patches" 2>/dev/null)" ]; then
          find "devices/${{matrix.target}}/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -p1 -E --forward --no-backup-if-mismatch"
        fi
        cp -Rf ./diy/* ./ || true
        if [ -f "devices/${{matrix.target}}/default-settings" ]; then
          echo >> package/*/*/my-default-settings/files/etc/uci-defaults/99-default-settings
          cat devices/${{matrix.target}}/default-settings >> package/*/*/my-default-settings/files/etc/uci-defaults/99-default-settings
        fi
        if [ -f "devices/${{matrix.target}}/.config" ]; then
          echo >> .config
          cat devices/${{matrix.target}}/.config >> .config
        fi

    - name: SSH connection to Actions I
      uses: kiddin9/debugger-action@master
      if: contains(github.event.action, 'ssh')

    - name: Prepare
      run: |
        cd openwrt
        make defconfig
        mv -f package/feeds/openwrt_packages openwrt_packages.b
        mv -f feeds/packages/lang feeds/packages/lang.b
        mv -f feeds/packages feeds/packages.b
        mkdir package/feeds/openwrt_packages
        #mv -f openwrt_packages.b/{wxbase,lib*,rapidjson,jpcre2,quickjspp,qtbase,qttools,rblibtorrent} package/feeds/openwrt_packages/ 2>/dev/null

    - name: Compile the firmware
      run: |
        cd ${GITHUB_WORKSPACE}/openwrt
        echo "-------------------------------"
        echo "github.event.action=${{github.event.action}}"
        echo -e "$(($(nproc)+1)) thread compile"
        fpkg="$(echo "${{github.event.action}}" | sed -e 's/\(mipsel_24kc\|x86_64\| [0-9][0-9.]*\| ssh\| noser\| cw\)//g' | sed -e 's/ //g')"
        echo "fpkg=${fpkg}"
        during="$(echo "${{github.event.action}}" | grep -o -E ' [0-9][0-9.]*' | sed -e 's/ //')"
        echo "during=${during}"
        echo "files under openwrt_packages.b/"
        ls openwrt_packages.b 2>/dev/null
        echo "-------------------------------"
        function comp(){
          cp -rf openwrt_packages.b/$ipk package/feeds/openwrt_packages/ && echo "copy openwrt_packages.b/$ipk to package/feeds/openwrt_packages/"
          if [[ $ipk != luci-* ]]; then
            mv -f feeds/packages.b feeds/packages && echo "move feeds/packages.b to feeds/packages"
            [ "$(grep -E "(PKG_BUILD_DEPENDS|packages/lang|meson.mk)" package/feeds/openwrt_packages/$ipk/Makefile)" ] && mv feeds/packages/lang.b feeds/packages/lang
          fi
          make package/$ipk/compile -j$(($(nproc)+1)) || make package/$ipk/compile V=s >>error_$ipk.log 2>&1
          if [[ $ipk != luci-* ]]; then
            mv feeds/packages/lang feeds/packages/lang.b 2>/dev/null && echo "move feeds/packages/lang feeds/packages/lang.b" || true
            mv -f feeds/packages feeds/packages.b 2>/dev/null && echo "move -f feeds/packages feeds/packages.b"
            rm -f package/feeds/openwrt_packages/$ipk 2>/dev/null && echo "remove -f package/feeds/openwrt_packages/$ipk"
          fi
        }
        series=1
        for ipk in $(ls openwrt_packages.b | grep -E "$fpkg"); do
          echo "$series、$ipk"
          let series+=1
          if [[ "$fpkg" && ! "$during" ]]; then
            echo "go comp!"
            comp
          else
            gitdate=$(curl -H "Authorization: token ${{ secrets.REPO_TOKEN }}" -s "https://api.github.com/repos/${{ env.PACKAGES_REPOS }}/commits?path=$ipk&per_page=1" | jq -r '.[0].commit.committer.date')
            if [ $gitdate != null ]; then
              gitdate=$(date -d "$gitdate" +%s)
              now=$(date -d "$(date)" +%s)
              [ "$during" ] || during="1.05"
              durings=`echo "$during*60*60*24" | bc`
              if [[ $(($gitdate + ${durings%.*})) -gt $now ]]; then
                echo "gitdate+during > now"
                echo "go comp!!"
                comp
              fi
            fi
          fi
        done
        echo "status=success" >> $GITHUB_ENV

    - name: Check space usage
      run: df -hT

    - name: Organize files
      id: organize
      run: |
        mkdir packages
        echo "files under ${GITHUB_WORKSPACE}/openwrt/bin/packages/*/*:"
        ls ${GITHUB_WORKSPACE}/openwrt/bin/packages/*/* 2>/dev/null
        cp -f ${GITHUB_WORKSPACE}/openwrt/bin/packages/${{ env.MTARGET }}/openwrt_packages/* packages/ && echo "move openwrt/bin/packages/*/openwrt_packages/* to packages" || true
        mv -f ${GITHUB_WORKSPACE}/openwrt/bin/packages/*/openwrt_packages/* packages/ || true
        mv -f ${GITHUB_WORKSPACE}/openwrt/.config packages/ || true
        mv -f ${GITHUB_WORKSPACE}/openwrt/bin/targets/*/*/packages/base-files* packages/ || true
        #cp -Rf ${GITHUB_WORKSPACE}/openwrt/bin/packages/*/packages/* packages/ || true
        echo "FIRMWARE=$PWD/packages" >> $GITHUB_ENV
        Emoji=("🎉" "🤞" "✨" "🎁" "🎈" "🎄" "🎨" "💋" "🍓" "🍕" "🍉" "💐" "🌴" "🚀" "🛸" "🗽" "⛅" "🌈" "🔥" "⛄" "🐶" "🏅" "🦄" "🐤")
        echo "EMOJI=${Emoji[$[$RANDOM % ${#Emoji[@]}]]}" >> $GITHUB_ENV
        if [[ $(ls -l openwrt/error* | grep "^-" | wc -l) -le 0 ]]; then
           echo "NAME=${Emoji[$[$RANDOM % ${#Emoji[@]}]]} ${{ env.date2 }} ${{ env.MTARGET }} ${{ env.EMOJI }}" >> $GITHUB_ENV
        else
           echo "NAME=❌ ${{ env.date2 }} ${{ env.MTARGET }} ❌" >> $GITHUB_ENV
        fi

    - name: SSH connection to Actions II
      if: env.SSH_ACTIONS == 'true' || (github.event.inputs.ssh == 'ssh')
      uses: danshui-git/debugger-action@master
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        
    - name: Create release
      id: create_release
      if: env.REPO_TOKEN && env.UPLOAD_FIRMWARE_FOR_RELEASE == 'true'
      continue-on-error: true
      run: |
        echo -e "定时更新插件，推送发布 🎈:\n" >> release.txt
        [ ${{ env.NOTICE }} ] && echo -e "${{ env.NOTICE }}" >> release.txt || true

    - name: Upload packages for release
      uses: softprops/action-gh-release@master
      continue-on-error: true
      if: env.REPO_TOKEN && env.UPLOAD_FIRMWARE_FOR_RELEASE == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      with:
        files: |
            ${{ env.FIRMWARE }}/*
            openwrt/error*.log
        name: ${{ env.NAME }}
        tag_name: ${{ env.date }}_${{ env.MTARGET }}
        body_path: release.txt

    - name: Upload packages for artifact
      uses: actions/upload-artifact@main
      continue-on-error: true
      if: env.UPLOAD_FIRMWARE_FOR_ARTIFACT == 'true'
      with:
        name: ${{ env.date3 }} ${{ env.MTARGET }}
        path: ${{ env.FIRMWARE }}

    - name: WeChat notification
      continue-on-error: true
      if: env.SCKEY
      run: |
        [ ${{ env.status }} == 'success' ] && curl https://sc.ftqq.com/${{ secrets.SCKEY }}.send?text=🎉OpenWrt_${{ env.date3 }}_${{ env.MTARGET }}软件仓库已更新😋|| curl https://sc.ftqq.com/${{ secrets.SCKEY }}.send?text=❌OpenWrt_${{ env.date3 }}_${{ env.MTARGET }}软件仓库更新失败😂

    - name: Telegram notification
      if: env.TELEGRAM_TOKEN && ! contains(github.event.action, 'notg')
      run: |
        # [ ${{ env.status }} == 'success' ] && curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=🎉 OpenWrt ${{ env.date3 }} ${{ env.MTARGET }} 软件仓库已更新 😋  ${{ env.COWURL }}   ${{ env.WETRANS }} 🚀" "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage"

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      continue-on-error: true
      with:
        retain_days: 1
        keep_minimum_runs: 1

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      continue-on-error: true
      if: env.UPLOAD_FIRMWARE_FOR_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 60
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
